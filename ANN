import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer

# Load data
data = pd.read_csv('car_data.csv')

# Define features and targets
features = data[['make', 'model', 'year', 'mileage', 'condition']]
target_class = data['sold_within_30_days']
target_reg = data['sale_price']

# Preprocessing for numerical and categorical data
numerical_features = ['year', 'mileage']
categorical_features = ['make', 'model', 'condition']

numerical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', StandardScaler())
])

categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, numerical_features),
        ('cat', categorical_transformer, categorical_features)
    ])

X = preprocessor.fit_transform(features)

# Split data
X_train, X_test, y_class_train, y_class_test, y_reg_train, y_reg_test = train_test_split(X, target_class, target_reg, test_size=0.2, random_state=42)



import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense, Concatenate
from tensorflow.keras.optimizers import Adam

# Define the input layer
input_layer = Input(shape=(X.shape[1],))

# Shared layers
shared_layer = Dense(64, activation='relu')(input_layer)
shared_layer = Dense(32, activation='relu')(shared_layer)

# Regression output layer (predict sale price)
reg_output = Dense(1, name='reg_output')(shared_layer)

# Concatenate the predicted price back with shared layer
concat_layer = Concatenate()([shared_layer, reg_output])

# Additional shared layer after concatenation
additional_shared_layer = Dense(32, activation='relu')(concat_layer)

# Classification output layer (predict likelihood of selling within 30 days)
class_output = Dense(1, activation='sigmoid', name='class_output')(additional_shared_layer)

# Define the model
model = Model(inputs=input_layer, outputs=[reg_output, class_output])

# Compile the model
model.compile(optimizer=Adam(), 
              loss={'reg_output': 'mse', 'class_output': 'binary_crossentropy'},
              metrics={'reg_output': 'mse', 'class_output': 'accuracy'})

# Train the model
history = model.fit(X_train, {'reg_output': y_reg_train, 'class_output': y_class_train},
                    validation_data=(X_test, {'reg_output': y_reg_test, 'class_output': y_class_test}),
                    epochs=100, batch_size=32)

# Evaluate the model
results = model.evaluate(X_test, {'reg_output': y_reg_test, 'class_output': y_class_test})
print(f'Regression MSE: {results[1]}')
print(f'Classification Accuracy: {results[3]}')
